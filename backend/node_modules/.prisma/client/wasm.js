
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  filename: 'filename',
  originalName: 'originalName',
  size: 'size',
  mimeType: 'mimeType',
  isCover: 'isCover',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullname: 'fullname',
  password: 'password',
  role: 'role',
  kycDocs: 'kycDocs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  ownerId: 'ownerId',
  financialDocs: 'financialDocs',
  targetAmount: 'targetAmount',
  currentAmount: 'currentAmount',
  minInvestment: 'minInvestment',
  profitSharingPercentage: 'profitSharingPercentage',
  profitSharingPercentageAfterBEP: 'profitSharingPercentageAfterBEP',
  prospectusUrl: 'prospectusUrl',
  prospectusFileName: 'prospectusFileName',
  deadline: 'deadline',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountHolder: 'accountHolder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestmentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  status: 'status',
  investorId: 'investorId',
  projectId: 'projectId',
  transferProofUrl: 'transferProofUrl',
  transferProofFileName: 'transferProofFileName',
  transferDate: 'transferDate',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedReason: 'rejectedReason',
  chatId: 'chatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileUrl: 'fileUrl',
  projectId: 'projectId',
  createdAt: 'createdAt'
};

exports.Prisma.DividendScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  date: 'date',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DividendDistributionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  percentage: 'percentage',
  status: 'status',
  dividendId: 'dividendId',
  investorId: 'investorId',
  investmentId: 'investmentId',
  paidAt: 'paidAt',
  paymentProof: 'paymentProof',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  unit: 'unit',
  weight: 'weight',
  volume: 'volume',
  sellerId: 'sellerId',
  createdAt: 'createdAt',
  status: 'status',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  priceType: 'priceType'
};

exports.Prisma.ProductPriceScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  currency: 'currency',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  buyerId: 'buyerId',
  quantity: 'quantity',
  notes: 'notes',
  currency: 'currency',
  pricePerUnit: 'pricePerUnit',
  totalPrice: 'totalPrice',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  status: 'status',
  orderId: 'orderId',
  createdAt: 'createdAt',
  carrier: 'carrier',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  updatedAt: 'updatedAt',
  seaPricingMode: 'seaPricingMode',
  cbmVolume: 'cbmVolume',
  containerType: 'containerType',
  freightCost: 'freightCost',
  currency: 'currency'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  plan: 'plan',
  startedAt: 'startedAt',
  expiresAt: 'expiresAt',
  trialEndsAt: 'trialEndsAt',
  cancelledAt: 'cancelledAt',
  pausedAt: 'pausedAt',
  renewalDate: 'renewalDate',
  autoRenew: 'autoRenew',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  labelId: 'labelId',
  customPrice: 'customPrice',
  customCurrency: 'customCurrency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentType: 'paymentType',
  paymentLink: 'paymentLink',
  externalId: 'externalId',
  subscriptionId: 'subscriptionId',
  labelId: 'labelId',
  metadata: 'metadata',
  providerData: 'providerData',
  webhookData: 'webhookData',
  failureReason: 'failureReason',
  paidAt: 'paidAt',
  failedAt: 'failedAt',
  expiredAt: 'expiredAt',
  description: 'description',
  invoiceNumber: 'invoiceNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionHistoryScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  action: 'action',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus',
  oldPlan: 'oldPlan',
  newPlan: 'newPlan',
  reason: 'reason',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookLogScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  eventType: 'eventType',
  eventId: 'eventId',
  payload: 'payload',
  processed: 'processed',
  processedAt: 'processedAt',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt'
};

exports.Prisma.EnterpriseLabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  contactEmail: 'contactEmail',
  defaultPrice: 'defaultPrice',
  currency: 'currency',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabelInvestorScalarFieldEnum = {
  id: 'id',
  labelId: 'labelId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingPlanScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerPlanId: 'providerPlanId',
  plan: 'plan',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  period: 'period',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  projectId: 'projectId',
  title: 'title',
  lastMessage: 'lastMessage',
  lastMessageAt: 'lastMessageAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatParticipantScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  role: 'role',
  lastReadAt: 'lastReadAt',
  lastReadMessageId: 'lastReadMessageId',
  isMuted: 'isMuted',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  senderId: 'senderId',
  chatId: 'chatId',
  replyToId: 'replyToId',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  originalName: 'originalName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  fileUrl: 'fileUrl',
  messageId: 'messageId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  relatedId: 'relatedId',
  metadata: 'metadata',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlatformSettingsScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  instruction: 'instruction',
  updatedByUserId: 'updatedByUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  country: 'country',
  address: 'address',
  companyLogo: 'companyLogo',
  companyName: 'companyName',
  descriptions: 'descriptions',
  profileCompanyUrl: 'profileCompanyUrl',
  profileCompanyFileName: 'profileCompanyFileName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  INVESTOR: 'INVESTOR',
  PROJECT_OWNER: 'PROJECT_OWNER',
  BUYER: 'BUYER',
  SELLER: 'SELLER',
  ADMIN: 'ADMIN',
  ADMIN_INVESTMENT: 'ADMIN_INVESTMENT',
  ADMIN_TRADING: 'ADMIN_TRADING',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CLOSED: 'CLOSED'
};

exports.InvestmentStatus = exports.$Enums.InvestmentStatus = {
  PENDING: 'PENDING',
  TRANSFER_PENDING: 'TRANSFER_PENDING',
  TRANSFER_UPLOADED: 'TRANSFER_UPLOADED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ACTIVE: 'ACTIVE'
};

exports.ReportType = exports.$Enums.ReportType = {
  INCOME_STATEMENT: 'INCOME_STATEMENT',
  BALANCE_SHEET: 'BALANCE_SHEET',
  CASH_FLOW: 'CASH_FLOW',
  BANK_STATEMENT: 'BANK_STATEMENT'
};

exports.DividendStatus = exports.$Enums.DividendStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PriceType = exports.$Enums.PriceType = {
  EXW: 'EXW',
  WAREHOUSE: 'WAREHOUSE'
};

exports.Currency = exports.$Enums.Currency = {
  IDR: 'IDR',
  USD: 'USD'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  SHIPPED: 'SHIPPED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ShipmentMethod = exports.$Enums.ShipmentMethod = {
  AIR: 'AIR',
  SEA: 'SEA',
  EXPRESS: 'EXPRESS'
};

exports.ShipmentStatus = exports.$Enums.ShipmentStatus = {
  PENDING: 'PENDING',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED'
};

exports.SeaPricingMode = exports.$Enums.SeaPricingMode = {
  CBM: 'CBM',
  CONTAINER: 'CONTAINER'
};

exports.ContainerType = exports.$Enums.ContainerType = {
  FT20: 'FT20',
  FT40: 'FT40'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  TRIAL: 'TRIAL',
  GOLD_MONTHLY: 'GOLD_MONTHLY',
  GOLD_YEARLY: 'GOLD_YEARLY',
  ENTERPRISE_CUSTOM: 'ENTERPRISE_CUSTOM'
};

exports.PaymentProvider = exports.$Enums.PaymentProvider = {
  PAYPAL: 'PAYPAL',
  XENDIT: 'XENDIT',
  MANUAL: 'MANUAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  ONE_TIME: 'ONE_TIME',
  RECURRING: 'RECURRING',
  SETUP: 'SETUP'
};

exports.SubscriptionAction = exports.$Enums.SubscriptionAction = {
  CREATED: 'CREATED',
  ACTIVATED: 'ACTIVATED',
  UPGRADED: 'UPGRADED',
  DOWNGRADED: 'DOWNGRADED',
  PAUSED: 'PAUSED',
  RESUMED: 'RESUMED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  RENEWED: 'RENEWED'
};

exports.BillingPeriod = exports.$Enums.BillingPeriod = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.ChatType = exports.$Enums.ChatType = {
  INVESTMENT_INQUIRY: 'INVESTMENT_INQUIRY',
  PROJECT_DISCUSSION: 'PROJECT_DISCUSSION',
  TRADING_SUPPORT: 'TRADING_SUPPORT',
  GENERAL_SUPPORT: 'GENERAL_SUPPORT'
};

exports.ChatStatus = exports.$Enums.ChatStatus = {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  ARCHIVED: 'ARCHIVED'
};

exports.ChatParticipantRole = exports.$Enums.ChatParticipantRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  OBSERVER: 'OBSERVER'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  FILE: 'FILE',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  ProductImage: 'ProductImage',
  User: 'User',
  Project: 'Project',
  Investment: 'Investment',
  Report: 'Report',
  Dividend: 'Dividend',
  DividendDistribution: 'DividendDistribution',
  Product: 'Product',
  ProductPrice: 'ProductPrice',
  Order: 'Order',
  Shipment: 'Shipment',
  Subscription: 'Subscription',
  Payment: 'Payment',
  SubscriptionHistory: 'SubscriptionHistory',
  WebhookLog: 'WebhookLog',
  EnterpriseLabel: 'EnterpriseLabel',
  LabelInvestor: 'LabelInvestor',
  BillingPlan: 'BillingPlan',
  Chat: 'Chat',
  ChatParticipant: 'ChatParticipant',
  Message: 'Message',
  MessageAttachment: 'MessageAttachment',
  Notification: 'Notification',
  PlatformSettings: 'PlatformSettings',
  SellerProfile: 'SellerProfile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
