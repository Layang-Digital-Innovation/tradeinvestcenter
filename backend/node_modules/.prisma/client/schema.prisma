generator client {
  provider = "prisma-client-js"
}

// NEW: Product images (cover and previews)
model ProductImage {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  url          String
  filename     String
  originalName String
  size         Int
  mimeType     String
  isCover      Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([productId])
  @@index([productId, isCover])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  fullname     String        @default("")
  password     String
  role         Role
  kycDocs      String?
  subscription Subscription?
  projects     Project[]     @relation("OwnerProjects")
  investments  Investment[]  @relation("InvestorInvestments")
  products     Product[]     @relation("SellerProducts")
  orders       Order[]       @relation("BuyerOrders")
  payments     Payment[]

  // Investment dividend relations
  dividends DividendDistribution[] @relation("InvestorDividends")

  // IMPROVED: Single relation for chat participants
  chatParticipants ChatParticipant[]

  // IMPROVED: Single relation for messages sent
  sentMessages Message[]

  // NEW: Back relation for Enterprise Label investors
  labelInvestors LabelInvestor[]

  // Notification relations
  notifications Notification[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  SellerProfile SellerProfile?
}

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  status        ProjectStatus @default(PENDING)
  owner         User          @relation("OwnerProjects", fields: [ownerId], references: [id])
  ownerId       String
  investments   Investment[]
  reports       Report[]
  dividends     Dividend[]
  financialDocs Json?

  // Investment targets and amounts
  targetAmount  Float? // Target funding amount
  currentAmount Float  @default(0) // Current funded amount
  minInvestment Float? // Minimum allowed investment amount

  // Profit sharing information
  profitSharingPercentage         Float? // Percentage of profit shared with investors
  profitSharingPercentageAfterBEP Float? // Percentage of profit shared with investors after BEP

  // Prospectus/Proposal document
  prospectusUrl      String? // URL to the uploaded prospectus file
  prospectusFileName String? // Original filename of the prospectus

  // Project deadline
  deadline DateTime?

  // Bank details for investment transfers
  bankName      String?
  accountNumber String?
  accountHolder String?

  // Chat relation
  chats Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investment {
  id         String           @id @default(uuid())
  amount     Float
  status     InvestmentStatus @default(PENDING)
  investor   User             @relation("InvestorInvestments", fields: [investorId], references: [id])
  investorId String
  project    Project          @relation(fields: [projectId], references: [id])
  projectId  String

  // Transfer proof and approval workflow
  transferProofUrl      String?
  transferProofFileName String?
  transferDate          DateTime?

  // Admin approval
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?

  // Chat reference for communication
  chatId String?

  // Dividend distributions
  dividendDistributions DividendDistribution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([investorId])
  @@index([projectId])
  @@index([status])
}

model Report {
  id        String     @id @default(uuid())
  type      ReportType
  fileUrl   String
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime   @default(now())
}

model Dividend {
  id        String   @id @default(uuid())
  amount    Float
  date      DateTime
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  // Individual dividend distributions
  distributions DividendDistribution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DividendDistribution {
  id         String         @id @default(uuid())
  amount     Float
  percentage Float // Percentage of total dividend
  status     DividendStatus @default(PENDING)

  // Relations
  dividend     Dividend   @relation(fields: [dividendId], references: [id])
  dividendId   String
  investor     User       @relation("InvestorDividends", fields: [investorId], references: [id])
  investorId   String
  investment   Investment @relation(fields: [investmentId], references: [id])
  investmentId String

  // Payment tracking
  paidAt       DateTime?
  paymentProof String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dividendId])
  @@index([investorId])
  @@index([investmentId])
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  // Multi-currency pricing via related ProductPrice rows
  prices      ProductPrice[]
  // TEMP: keep legacy scalar fields during migration to backfill new structures
  price       Float?
  currency    String?
  unit        String
  weight      Float
  volume      String
  seller      User           @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId    String
  orders      Order[]
  createdAt   DateTime       @default(now())
  // Listing moderation and pricing metadata
  status      ProductStatus  @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  priceType   PriceType      @default(EXW)
  // Images
  images      ProductImage[]
}

// NEW: Price per currency for products
model ProductPrice {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  currency  Currency
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, currency])
  @@index([productId])
}

model Order {
  id           String      @id @default(uuid())
  product      Product     @relation(fields: [productId], references: [id])
  productId    String
  buyer        User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId      String
  quantity     Int
  notes        String?
  // Selected currency and captured pricing at order time
  currency     Currency    @default(IDR)
  pricePerUnit Float       @default(0)
  totalPrice   Float       @default(0)
  status       OrderStatus @default(PENDING)
  shipment     Shipment?
  createdAt    DateTime    @default(now())
}

model Shipment {
  id             String         @id @default(uuid())
  method         ShipmentMethod
  status         ShipmentStatus @default(PENDING)
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String         @unique
  createdAt      DateTime       @default(now())
  // Tracking enhancements
  carrier        String?
  trackingNumber String?
  trackingUrl    String?
  updatedAt      DateTime       @updatedAt

  // Sea freight enhancements
  seaPricingMode SeaPricingMode?
  cbmVolume      Float? // CBM volume when pricing by CBM
  containerType  ContainerType? // 20ft / 40ft when pricing by container
  freightCost    Float? // Optional quoted freight cost
  currency       Currency?       @default(USD)
}

// IMPROVED: Enhanced Subscription model with better tracking
model Subscription {
  id                 String             @id @default(uuid())
  user               User               @relation(fields: [userId], references: [id])
  userId             String             @unique
  status             SubscriptionStatus @default(TRIAL)
  plan               SubscriptionPlan   @default(TRIAL)
  startedAt          DateTime           @default(now())
  expiresAt          DateTime?
  trialEndsAt        DateTime?
  cancelledAt        DateTime?
  pausedAt           DateTime?
  renewalDate        DateTime?
  autoRenew          Boolean            @default(true)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  payments           Payment[]
  // Enterprise Custom support
  label              EnterpriseLabel?   @relation(fields: [labelId], references: [id])
  labelId            String?
  customPrice        Float?
  // Use enum for currency
  customCurrency     Currency           @default(IDR)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

// IMPROVED: Enhanced Payment model with better subscription integration
model Payment {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  provider       PaymentProvider
  amount         Float
  // Use enum for currency
  currency       Currency         @default(IDR)
  status         PaymentStatus    @default(PENDING)
  paymentType    PaymentType      @default(ONE_TIME) // Added: Payment type
  paymentLink    String?
  externalId     String? // For provider's transaction/plan ID
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  // Link payment to Enterprise Label (organization-level billing)
  label          EnterpriseLabel? @relation(fields: [labelId], references: [id])
  labelId        String?

  // Enhanced metadata fields
  metadata      Json? // General metadata
  providerData  Json? // Raw data from payment provider
  webhookData   Json? // Webhook payload data
  failureReason String? // Added: Reason for failed payments

  // Timing fields
  paidAt    DateTime? // Added: When payment was completed
  failedAt  DateTime? // Added: When payment failed
  expiredAt DateTime? // Added: When payment link expired

  // Additional tracking
  description   String? // Added: Payment description
  invoiceNumber String? // Added: Invoice number for accounting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([subscriptionId])
  @@index([externalId])
  @@index([status])
  @@index([labelId])
  @@index([currency])
}

// ADDED: Subscription history for audit trail
model SubscriptionHistory {
  id             String              @id @default(uuid())
  subscriptionId String
  action         SubscriptionAction
  oldStatus      SubscriptionStatus?
  newStatus      SubscriptionStatus?
  oldPlan        SubscriptionPlan?
  newPlan        SubscriptionPlan?
  reason         String?
  metadata       Json?
  createdAt      DateTime            @default(now())

  @@index([subscriptionId])
}

// ADDED: Webhook events log for debugging
model WebhookLog {
  id           String          @id @default(uuid())
  provider     PaymentProvider
  eventType    String
  eventId      String? // Provider's event ID
  payload      Json
  processed    Boolean         @default(false)
  processedAt  DateTime?
  errorMessage String?
  retryCount   Int             @default(0)
  createdAt    DateTime        @default(now())

  @@index([provider, eventType])
  @@index([processed])
}

enum Role {
  INVESTOR
  PROJECT_OWNER
  BUYER
  SELLER
  ADMIN
  ADMIN_INVESTMENT
  ADMIN_TRADING
  SUPER_ADMIN
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  ONGOING
  COMPLETED
  CLOSED
}

enum InvestmentStatus {
  PENDING // Initial state when investment is created
  TRANSFER_PENDING // Waiting for transfer proof upload
  TRANSFER_UPLOADED // Transfer proof uploaded, waiting for admin approval
  APPROVED // Admin approved the investment
  REJECTED // Admin rejected the investment
  ACTIVE // Investment is active and investor has access
}

enum DividendStatus {
  PENDING // Dividend calculated but not yet paid
  PAID // Dividend has been paid to investor
  CANCELLED // Dividend payment cancelled
}

enum ReportType {
  INCOME_STATEMENT
  BALANCE_SHEET
  CASH_FLOW
  BANK_STATEMENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELLED
}

enum ShipmentMethod {
  AIR
  SEA
  EXPRESS
}

// Pricing mode for Sea Freight
enum SeaPricingMode {
  CBM
  CONTAINER
}

// Container size for Sea Freight container pricing
enum ContainerType {
  FT20
  FT40
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}

// NEW: Product listing moderation status
enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

// NEW: Pricing type for marketplace listings
enum PriceType {
  EXW // Ex-Works (harga di gudang)
  WAREHOUSE // generic warehouse pricing
}

// IMPROVED: Enhanced subscription status
enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAUSED // Added: For temporarily paused subscriptions
  PAST_DUE // Added: When payment fails but subscription is still active
  CANCELLED // Added: User cancelled but still has access until period ends
  EXPIRED
}

// NEW: Enterprise Label for custom subscriptions
model EnterpriseLabel {
  id             String          @id @default(uuid())
  name           String
  code           String          @unique
  contactEmail   String?
  defaultPrice   Float?
  currency       Currency?       @default(IDR)
  description    String?
  metadata       Json?
  subscriptions  Subscription[]
  // NEW: Investor associations
  labelInvestors LabelInvestor[]
  // Back-relation to payments (organization-level billing)
  payments       Payment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// NEW: Junction table between EnterpriseLabel and User (investor)
model LabelInvestor {
  id        String          @id @default(uuid())
  label     EnterpriseLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId   String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([labelId, userId])
  @@index([labelId])
  @@index([userId])
}

enum SubscriptionPlan {
  TRIAL
  GOLD_MONTHLY
  GOLD_YEARLY
  ENTERPRISE_CUSTOM
}

enum PaymentProvider {
  PAYPAL
  XENDIT
  MANUAL
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

model BillingPlan {
  id             String           @id @default(uuid())
  provider       PaymentProvider
  providerPlanId String?          @unique
  plan           SubscriptionPlan
  name           String?
  description    String?
  price          Float
  currency       Currency         @default(USD)
  period         BillingPeriod    @default(MONTHLY)
  status         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([provider, plan, period, currency])
  @@index([provider])
  @@index([plan])
  @@index([currency])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED // Added: When payment link expires
  CANCELLED // Added: When payment is cancelled
  REFUNDED
}

// ADDED: Payment type enum
enum PaymentType {
  ONE_TIME // Single payment
  RECURRING // Subscription payment
  SETUP // Initial subscription setup
}

// NEW: Supported currencies
enum Currency {
  IDR
  USD
}

// ADDED: Subscription action for history tracking
enum SubscriptionAction {
  CREATED
  ACTIVATED
  UPGRADED
  DOWNGRADED
  PAUSED
  RESUMED
  CANCELLED
  EXPIRED
  RENEWED
}

// Chat models for internal realtime messaging
model Chat {
  id     String     @id @default(uuid())
  type   ChatType   @default(INVESTMENT_INQUIRY)
  status ChatStatus @default(ACTIVE)

  // IMPROVED: Related project (for investment/project discussions)
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  // Chat metadata
  title         String?
  lastMessage   String?
  lastMessageAt DateTime?

  // IMPROVED: Use participant model instead of multiple foreign keys
  participants ChatParticipant[]
  messages     Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([status])
  @@index([lastMessageAt])
}

// NEW: Participant junction table for flexible chat membership
model ChatParticipant {
  id String @id @default(uuid())

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Participant role in this specific chat
  role ChatParticipantRole @default(MEMBER)

  // Last read message tracking
  lastReadAt        DateTime?
  lastReadMessageId String?

  // Notifications
  isMuted Boolean @default(false)

  // Joined/left tracking
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId])
  @@index([userId, lastReadAt])
}

model Message {
  id      String      @id @default(uuid())
  content String?
  type    MessageType @default(TEXT)

  // IMPROVED: Single sender relation
  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  // File attachments
  attachments MessageAttachment[]

  // Message metadata
  replyToId String?
  isEdited  Boolean   @default(false)
  editedAt  DateTime?
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId, createdAt])
  @@index([senderId])
}

model MessageAttachment {
  id           String @id @default(uuid())
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  fileUrl      String

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  createdAt DateTime @default(now())

  @@index([messageId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  relatedId String?
  metadata  Json?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isRead])
  @@map("notifications")
}

enum ChatType {
  INVESTMENT_INQUIRY
  PROJECT_DISCUSSION
  TRADING_SUPPORT
  GENERAL_SUPPORT
}

enum ChatParticipantRole {
  ADMIN
  MEMBER
  OBSERVER
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  DOCUMENT
  SYSTEM
}

enum ChatStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

// NEW: Singleton platform settings for bank/payment instructions
model PlatformSettings {
  id              String   @id @default("platform_settings")
  bankName        String?
  accountName     String?
  accountNumber   String?
  instruction     String?
  updatedByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// NEW: Seller profile to store
model SellerProfile {
  id                     String   @id @default(uuid())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique
  country                String?
  address                String?
  companyLogo            String?
  companyName            String?
  descriptions           String?
  profileCompanyUrl      String?
  profileCompanyFileName String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}
